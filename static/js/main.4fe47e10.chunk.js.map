{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","Object","keys","map","key","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","props","defaultGood","defaultNeutral","defaultBad","handleStatistics","setState","countTotalFeedback","countPositiveFeedbackPercentage","percentage","resume","Math","floor","this","Component","defaultProps","defaultTotal","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qVA2BeA,EAvBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACE,oBAAIC,UAAU,UAAd,SACGC,OAAOC,KAAKJ,GAASK,KAAI,SAACC,GAAD,OACxB,oBAAcJ,UAAU,SAAxB,SACE,wBACEK,KAAK,SACLL,UAAU,iBACVM,QAAS,kBAAMP,EAAgBK,IAHjC,SAKGA,KANIA,WC6BFG,G,MAjCI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,oBAAIZ,UAAU,oBAAd,wBACA,+BACE,oBAAIA,UAAU,mBAAd,SACE,uCAAUQ,OAEZ,oBAAIR,UAAU,mBAAd,SACE,0CAAaS,OAEf,oBAAIT,UAAU,mBAAd,SACE,sCAASU,OAEX,oBAAIV,UAAU,mBAAd,SACE,wCAAWW,OAEb,oBAAIX,UAAU,mBAAd,SACE,oDAAuBY,EAAvB,iBCPKC,G,MAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASf,UAAU,UAAnB,UACGc,GAAS,oBAAId,UAAU,iBAAd,SAAgCc,IACzCC,OCGUC,G,MANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGjB,UAAU,eAAb,SAA6BiB,MCG7DC,E,4MAOJC,MAAQ,CACNX,KAAM,EAAKY,MAAMC,YACjBZ,QAAS,EAAKW,MAAME,eACpBZ,IAAK,EAAKU,MAAMG,Y,EAGlBC,iBAAmB,SAACpB,GAClB,EAAKqB,SAAL,eACGrB,EAAM,EAAKe,MAAMf,GAAO,K,EAI7BsB,mBAAqB,WAEnB,OADc,EAAKP,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAIlEiB,gCAAkC,WAChC,IAAIC,EAAa,EACjB,GAAwB,IAApB,EAAKT,MAAMX,KAAY,CACzB,IAAIqB,EAA4B,IAAlB,EAAKV,MAAMX,KAAc,EAAKkB,qBAC5CE,EAAaE,KAAKC,MAAMF,GAE1B,OAAOD,G,4CAGT,WACE,MAA+BI,KAAKb,MAA5BX,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,qCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CACEhB,QAASkC,KAAKb,MACdpB,gBAAiBiC,KAAKR,qBAGK,IAA9BQ,KAAKN,qBACJ,cAAC,EAAD,UACE,cAAC,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOqB,KAAKN,qBACZd,mBAAoBoB,KAAKL,sCAI7B,cAAC,EAAD,UACE,cAAC,EAAD,CAAcV,QAAQ,+B,GAxDhBgB,aAAZf,EACGgB,aAAe,CACpBb,YAAa,EACbC,eAAgB,EAChBC,WAAY,EACZY,aAAc,GA2DHjB,QClEfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4fe47e10.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./FeedbackOptions.css\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    <ul className=\"Options\">\n      {Object.keys(options).map((key) => (\n        <li key={key} className=\"Option\">\n          <button\n            type=\"button\"\n            className=\"Option__button\"\n            onClick={() => onLeaveFeedback(key)}\n          >\n            {key}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Statistics.css\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <h2 className=\"Statistics__title\">Statistics</h2>\n      <ul>\n        <li className=\"Statistics__item\">\n          <p>Good: {good}</p>\n        </li>\n        <li className=\"Statistics__item\">\n          <p>Neutral: {neutral}</p>\n        </li>\n        <li className=\"Statistics__item\">\n          <p>Bad: {bad}</p>\n        </li>\n        <li className=\"Statistics__item\">\n          <p>Total: {total}</p>\n        </li>\n        <li className=\"Statistics__item\">\n          <p>Positive feedback: {positivePercentage}%</p>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Section.css\";\n\nconst Section = ({ title, children }) => (\n  <section className=\"Section\">\n    {title && <h1 className=\"Section__title\">{title}</h1>}\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Notification.css\";\n\nconst Notification = ({ message }) => <p className=\"Notification\">{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\n\nclass App extends Component {\n  static defaultProps = {\n    defaultGood: 0,\n    defaultNeutral: 0,\n    defaultBad: 0,\n    defaultTotal: 0,\n  };\n  state = {\n    good: this.props.defaultGood,\n    neutral: this.props.defaultNeutral,\n    bad: this.props.defaultBad,\n  };\n\n  handleStatistics = (key) => {\n    this.setState({\n      [key]: this.state[key] + 1,\n    });\n  };\n\n  countTotalFeedback = () => {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let percentage = 0;\n    if (this.state.good !== 0) {\n      let resume = (this.state.good * 100) / this.countTotalFeedback();\n      percentage = Math.floor(resume);\n    }\n    return percentage;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleStatistics}\n          />\n        </Section>\n        {this.countTotalFeedback() !== 0 ? (\n          <Section>\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Section>\n            <Notification message=\"No feedback given\" />\n          </Section>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}